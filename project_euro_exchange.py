# -*- coding: utf-8 -*-
"""Project Euro Exchange.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nkXuXrixLksxX2f8YcdXbryxzVHt1i4

# Project Euro Exchange

Data visualization project.

The dataset we'll use describes Euro daily exchange rates between 1999 and 2021. The euro (symbolized with €) is the official currency in most of the countries of the European Union.

If the exchange rate of the euro to the US dollar is 1.5, you get 1.5 US dollars if you pay 1.0 euro (one euro has more value than one US dollar at this exchange rate).
"""

!wget http://bioinf-mw.bihz.upwr.edu.pl/students-data/euro-daily-hist_1999_2020.csv

import pandas as pd

df = pd.read_csv("euro-daily-hist_1999_2020.csv")
df.head()

"""Some data cleaning"""

df.info()

df.rename(columns={'[US dollar ]': 'US_dollar', 'Period\\Unit:': 'Time'}, inplace=True)

df['Time'] = pd.to_datetime(df['Time'])

df.sort_values('Time', inplace = True)
df.reset_index(drop=True, inplace =True)

df.head()

value_counts = df['US_dollar'].value_counts()
value_counts

df = df[df['US_dollar'] != '-']
df = df.dropna(subset = ['US_dollar'])

df['US_dollar'] = df['US_dollar'].astype(float)

"""The first thing we did, was changing the names of the columns to more python style and easier to operate with. Then we changed the type of column 'Time' to datetime and sorted the data by this column. We also created new indexes for data.

In next step we dropped data with NA's or '-' sign (in column 'US_dollar') so we could perform calculation and analysis on data.

In the next steps we'll try to generate a line plot to visualize the evolution of the euro-dollar exchange rate.
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.plot(df['Time'], df['US_dollar'])
plt.show()

"""The small wiggles that can be seen in this figure represents daily variation in the exchange rate. The rate only shows clear upward or downward trends in the longer run (month or years). 

We want to concentrate into long-term trends, so we will be using rolling (moving) mean. Rolling mean calculates mean beetwen previus numbers (the amount of the numbers depends on how much we want to average) so we can see the trend in more rounded shape.
"""

plt.figure(figsize=(9,6))

plt.subplot(3,2,1)
plt.plot(df['Time'], df['US_dollar'])
plt.title('Origial values', weight = 'bold')

for i,rolling_mean in zip([2,3,4,5,6],
                          [7,30,50,100,365]):
  plt.subplot(3,2,i)
  plt.plot(df['Time'],
  df['US_dollar'].rolling(rolling_mean).mean())
  plt.title('Rolling Window' + str(rolling_mean), weight = 'bold')

plt.tight_layout()
plt.show()

"""Now we can see how our line plot changes visually as we increase the rolling window. The window gets larger, and the line becomes smoother.

We will try to visualize how the euro-dollar rate changed during the 2007-2008 financial crisis.
"""

df['rolling_mean']=df['US_dollar'].rolling(30).mean()

financial_crisis = df.copy()[(df['Time'].dt.year >= 2006) & (df['Time'].dt.year <= 2009)]

financial_crisis_7_8 = df.copy()[(df["Time"].dt.year >=2007) & (df['Time'].dt.year <=2008)]

### Adding the FiveThirtyEight style
import matplotlib.style as style
style.use('fivethirtyeight')

### Adding the plot
fig,ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')

fig,ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')

### Highlighting the 2007-2008 period

ax.plot(financial_crisis_7_8['Time'],
        financial_crisis_7_8['rolling_mean'],
        linewidth=3, color='#e23d28')

plt.show()

fig,ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')

ax.plot(financial_crisis_7_8['Time'],
        financial_crisis_7_8['rolling_mean'],
        linewidth=3, color='#e23d28')

### Highlihting the peak of the crisis
ax.axvspan(xmin=13950, xmax=14130,
           alpha=0.3, color='grey')

fig,ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')

ax.plot(financial_crisis_7_8['Time'],
        financial_crisis_7_8['rolling_mean'],
        linewidth=3, color='#e23d28')

ax.axvspan(xmin=13950, xmax=14130,
           alpha=0.3, color='grey')

### Adding separate tick labels
ax.set_xticklabels([])
ax.set_yticklabels([])

x = 13110
for year in ['2006', '2007', '2008', '2009', '2010']:
    ax.text(x, 1.13, year, alpha=0.5, fontsize=11)
    x += 365

y = 1.193   
for rate in ['1.2', '1.3', '1.4', '1.5']:
    ax.text(13000, y, rate, alpha=0.5, fontsize=11)
    y += 0.1

fig,ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')

ax.plot(financial_crisis_7_8['Time'],
        financial_crisis_7_8['rolling_mean'],
        linewidth=3, color='#e23d28')

ax.axvspan(xmin=13950, xmax=14130,
           alpha=0.3, color='grey')

ax.set_xticklabels([])
ax.set_yticklabels([])

x = 13110
for year in ['2006', '2007', '2008', '2009', '2010']:
    ax.text(x, 1.13, year, alpha=0.5, fontsize=11)
    x += 365

y = 1.193   
for rate in ['1.2', '1.3', '1.4', '1.5']:
    ax.text(13000, y, rate, alpha=0.5, fontsize=11)
    y += 0.1

## Adding a title and a subtitle    
ax.text(13000, 1.67, "Euro-USD rate peaked at 1.59 during 2007-2008's financial crisis",
        weight='bold')
ax.text(13000, 1.63, 'Euro-USD exchange rates between 2006 and 2010',
        size=12)

fig,ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')

ax.plot(financial_crisis_7_8['Time'],
        financial_crisis_7_8['rolling_mean'],
        linewidth=3, color='#e23d28')

ax.axvspan(xmin=13950, xmax=14130,
           alpha=0.3, color='grey')

ax.set_xticklabels([])
ax.set_yticklabels([])

x = 13110
for year in ['2006', '2007', '2008', '2009', '2010']:
    ax.text(x, 1.13, year, alpha=0.5, fontsize=11)
    x += 365

y = 1.193   
for rate in ['1.2', '1.3', '1.4', '1.5']:
    ax.text(13000, y, rate, alpha=0.5, fontsize=11)
    y += 0.1
   
ax.text(13000, 1.67, "Euro-USD rate peaked at 1.59 during 2007-2008's financial crisis",
        weight='bold')
ax.text(13000, 1.63, 'Euro-USD exchange rates between 2006 and 2010',
        size=12)

### Adding a signature
ax.text(13000, 1.07, 'Bartosz Beżyk' + ' '*94 + 'Source: European Central Bank',
        color = '#f0f0f0', backgroundcolor = '#4d4d4d',
        size=10)

### Add some transparency to the grid
ax.grid(alpha=0.5)

plt.show()

"""In the figure we can see that Euro-USD rate peaked at 1.59 during 2007-2008's financial crisis. The peak is marked with gray background and the whole crisis is marked by red line.

Here we will show Euro to US Dollar exchange rate 1 year before and after 9-11.
"""

#isolating pre911 and post911(inclusive) 
pre_start_date = '2000-09-11'
pre_end_date = '2001-09-10'

pre_start_date = pd.to_datetime(pre_start_date)
pre_end_date = pd.to_datetime(pre_end_date)

pre_911 = df[df['Time'].between(pre_start_date, pre_end_date)]

pre_911.head(5)
#print(pre_911.tail(5))

post_start_date = '2001-09-11'
post_end_date = '2002-09-11'

post_start_date = pd.to_datetime(post_start_date)
post_end_date = pd.to_datetime(post_end_date)

post_911 = df[df['Time'].between(post_start_date, post_end_date)]

post_911.head(5)

import datetime as dt
style.use('seaborn')
fig, ax = plt.subplots(figsize=(9,5))
ax.plot(pre_911['Time'], pre_911['US_dollar'])
ax.plot(post_911['Time'], post_911['US_dollar'])

#v and h lines
ax.axvline(dt.datetime(2001, 9, 11), 
            ymin=0.05, ymax=0.89,
            color='#5A5A5A', alpha=.5,
            linewidth=2, linestyle='dashed')

ax.text(11530, 1.01, '2002 Sep 11',
         size=12, color='#4d4d4d')

#Title
ax.text(11181, 1.03, 'Euro to US Dollar Exchange Rate: 1 Year Before and After 9-11',
        size=14, weight='bold',color = '#f0f0f0',
        backgroundcolor = '#4d4d4d')

"""In this plot we see euro-dollar exchange rate 9-11 marked by blue color and after 9-11 marked by green color.

## Summary

In this project, our main focus was on effectively presenting data in a simple and engaging way. We aimed to not only understand the information ourselves but also to clearly explain and demonstrate our findings to others. Through the use of clear plots and visualizations, we strived to provide easy-to-understand explanations of the patterns and insights we discovered. Our ultimate goal was to ensure that a wide range of people could easily grasp and appreciate our findings.
"""

